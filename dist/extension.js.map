{"version":3,"sources":["webpack://kbur-seed-test-1/./src/extension.ts","webpack://kbur-seed-test-1/external \"child_process\"","webpack://kbur-seed-test-1/external \"fs\"","webpack://kbur-seed-test-1/external \"os\"","webpack://kbur-seed-test-1/external \"vscode\"","webpack://kbur-seed-test-1/webpack/bootstrap","webpack://kbur-seed-test-1/webpack/startup"],"names":["homedir","fs","pkg","projectPath","executeCommand","command","Promise","resolve","reject","stdout","stderr","child","cp","exec","cwd","version","window","withProgress","location","ProgressLocation","Notification","title","cancellable","progress","token","onCancellationRequested","kill","Error","on","data","report","message","toString","exitCode","increment","err","then","showInformationMessage","catch","showErrorMessage","count","context","subscriptions","push","commands","registerCommand","terminal","activeTerminal","getSelectedRepovalue","projectName","showInputBox","value","valueSelection","placeHolder","ignoreFocusOut","validateInput","text","getRepoValue","existsSync","repoList","split","showQuickPick","onDidSelectItem","item","toLowerCase","selectedrepositorylist","includes","reverse","pop","hide","selectedRepositoryType","selectedRepoSource","authType","repositoryUrl","branchName","accessToken","repoNamealias","repositoryDescription","selection","toLocaleLowerCase","finalCommand","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"mappings":"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","file":"extension.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { window, commands, ExtensionContext, ProgressLocation } from \"vscode\";\r\nconst homedir = require(\"os\").homedir();\r\nconst fs = require(\"fs\");\r\nimport * as cp from \"child_process\";\r\nconst pkg = require(\"../package.json\");\r\nlet projectPath: any;\r\nexport function getwaitingMessage(count: number) {\r\n  if (count === 1) {\r\n    return \"Please Wait this might take few minutes\";\r\n  }\r\n  if (count === 2) {\r\n    return \"Installing packages...\";\r\n  }\r\n  if (count === 3) {\r\n    return \"Setting up project\";\r\n  }\r\n}\r\nexport async function executeCommand(command: string) {\r\n  return new Promise(async (resolve, reject) => {\r\n    let stdout = \"\";\r\n    let stderr = \"\";\r\n    const child: any = await cp.exec(command, {\r\n      cwd: `${homedir}\\\\.vscode\\\\extensions\\\\kunalburangi.kbur-seed-test-1-${pkg.version}\\\\dist`,\r\n    });\r\n\r\n    const progress: any = window.withProgress(\r\n      {\r\n        location: ProgressLocation.Notification,\r\n        title: \"Loading...\",\r\n        cancellable: false,\r\n      },\r\n      (progress, token) => {\r\n        token.onCancellationRequested(() => {\r\n          child.kill();\r\n          reject(new Error(`Command  was cancelled`));\r\n        });\r\n\r\n        return new Promise(async (resolve, reject) => {\r\n          child.stdout.on(\"data\", (data: any) => {\r\n            stdout += data;\r\n            progress.report({ message: data.toString() });\r\n          });\r\n\r\n          child.stderr.on(\"data\", (data: any) => {\r\n            stderr += data;\r\n            progress.report({ message: data.toString() });\r\n          });\r\n\r\n          child.on(\"close\", (exitCode: any) => {\r\n            progress.report({ increment: 100 });\r\n            resolve({ stdout, stderr, exitCode });\r\n          });\r\n\r\n          child.on(\"error\", (err: any) => {\r\n            reject(err);\r\n          });\r\n        });\r\n      }\r\n    );\r\n    progress\r\n      .then(() => {\r\n        window.showInformationMessage(`Command has finished running`);\r\n        resolve(stdout);\r\n      })\r\n      .catch((err: any) => {\r\n        window.showErrorMessage(err.message);\r\n        reject(err);\r\n      });\r\n  });\r\n}\r\n\r\nexport function activate(context: ExtensionContext) {\r\n  context.subscriptions.push(\r\n    commands.registerCommand(\"seed.templates\", async () => {\r\n      let terminal = window.activeTerminal;\r\n      let getSelectedRepovalue = \"\";\r\n      // Get project name from user\r\n      const projectName = await window.showInputBox({\r\n        value: \"\",\r\n        valueSelection: [2, 4],\r\n        placeHolder: \"Name of project\",\r\n        ignoreFocusOut: true,\r\n        validateInput: (text) => {\r\n          // window.showInformationMessage(`Validating: ${text}`);\r\n          return text === \"123\" ? \"Not 123!\" : null;\r\n        },\r\n      });\r\n\r\n      if (projectName) {\r\n        // Get Project Path from user\r\n        projectPath = await window.showInputBox({\r\n          value: \"\",\r\n          valueSelection: [2, 4],\r\n          ignoreFocusOut: true,\r\n          placeHolder:\r\n            \"Path of the directory where the project should get created. eg: C://temp\",\r\n          validateInput: (text) => {\r\n            // window.showInformationMessage(`Validating: ${text}`);\r\n            return text === \"123\" ? \"Not 123!\" : null;\r\n          },\r\n        });\r\n        if (projectPath) {\r\n          projectPath = `${projectPath}/${projectName}`;\r\n\r\n          if (!fs.existsSync(projectPath)) {\r\n            executeCommand(`mkdir ${projectPath}`);\r\n          }\r\n\r\n          let getRepoValue;\r\n          let repoList: any = await executeCommand(`tmpo repository list `);\r\n          repoList = repoList.split(\"\\n\");\r\n\r\n          await window.showQuickPick(repoList, {\r\n            placeHolder: \"Select Repository\",\r\n            ignoreFocusOut: true,\r\n            onDidSelectItem: (item) =>\r\n              (getRepoValue = item.toString().toLowerCase()),\r\n          });\r\n          const outputRepovalueList: any = await executeCommand(\r\n            `tmpo template list -r \"${getRepoValue}\"`\r\n          );\r\n          let selectedrepositorylist = outputRepovalueList.split(\"\\n\");\r\n          if (selectedrepositorylist[0].includes(\"New release found\")) {\r\n            selectedrepositorylist = selectedrepositorylist.reverse();\r\n            selectedrepositorylist.pop();\r\n          }\r\n\r\n          await window.showQuickPick(selectedrepositorylist, {\r\n            placeHolder: `Select \"${getRepoValue}\" Repository`,\r\n            ignoreFocusOut: true,\r\n            onDidSelectItem: (item) =>\r\n              (getSelectedRepovalue = item.toString().toLowerCase()),\r\n          });\r\n          if (\r\n            projectName &&\r\n            projectPath &&\r\n            getRepoValue &&\r\n            getSelectedRepovalue\r\n          ) {\r\n            await executeCommand(\r\n              `echo y | tmpo --yes init \"${projectName}\" -r \"${getRepoValue}\" -t \"${getSelectedRepovalue}\" -d \"${projectPath}\" --username . --email . --remote . `\r\n            );\r\n\r\n            terminal?.hide();\r\n          }\r\n        }\r\n      }\r\n    })\r\n  );\r\n  context.subscriptions.push(\r\n    commands.registerCommand(\"seed.addrepository\", async () => {\r\n      let selectedRepositoryType: any = \"\";\r\n      let selectedRepoSource: any = \"\";\r\n      let authType: any = \"\";\r\n      let repositoryUrl: any = \"\";\r\n      let branchName: any = \"\";\r\n      let accessToken: any = \"\";\r\n      let repoNamealias: any = \"\";\r\n      let repositoryDescription: any = \"\";\r\n\r\n      selectedRepositoryType = \"\";\r\n      selectedRepoSource = \"\";\r\n      authType = \"\";\r\n      repositoryUrl = \"\";\r\n      branchName = \"\";\r\n      accessToken = \"\";\r\n      repoNamealias = \"\";\r\n      repositoryDescription = \"\";\r\n      await window\r\n        .showQuickPick([\"Remote\", \"Directory\"], {\r\n          placeHolder: \"Select Repository Type\",\r\n          ignoreFocusOut: true,\r\n        })\r\n        .then((selection) => {\r\n          if (!selection) {\r\n            return;\r\n          }\r\n          selectedRepositoryType = selection.toString().toLowerCase();\r\n        });\r\n      if (!selectedRepositoryType) {\r\n        window.showErrorMessage(\"Repository Type is required!\");\r\n        return;\r\n      }\r\n      if (selectedRepositoryType && selectedRepositoryType === \"remote\") {\r\n        await window\r\n          .showQuickPick([\"Github\", \"Gitlab\"], {\r\n            placeHolder: \"Select Repository Source\",\r\n            ignoreFocusOut: true,\r\n          })\r\n          .then((selection) => {\r\n            if (!selection) {\r\n              return;\r\n            }\r\n            selectedRepoSource = selection.toString().toLowerCase();\r\n          });\r\n        if (selectedRepoSource) {\r\n          await window\r\n            .showQuickPick([\"Basic\", \"None\", \"Token\"], {\r\n              placeHolder: \"Select Authentication Mode\",\r\n              ignoreFocusOut: true,\r\n            })\r\n            .then((selection) => {\r\n              if (!selection) {\r\n                return;\r\n              }\r\n              authType = selection.toString().toLocaleLowerCase();\r\n            });\r\n          if (!authType) {\r\n            window.showErrorMessage(\"Authentication Type is required!\");\r\n            return;\r\n          }\r\n          if (authType === \"basic\") {\r\n            window.showErrorMessage(\"Basic  auth type is not yet supported!\");\r\n            selectedRepositoryType = \"\";\r\n            selectedRepoSource = \"\";\r\n            authType = \"\";\r\n            repositoryUrl = \"\";\r\n            branchName = \"\";\r\n            accessToken = \"\";\r\n            repoNamealias = \"\";\r\n            repositoryDescription = \"\";\r\n            return;\r\n          } else {\r\n            repositoryUrl = await window.showInputBox({\r\n              placeHolder: \"Enter repository url \",\r\n              ignoreFocusOut: true,\r\n              validateInput: (text) => {\r\n                // window.showInformationMessage(`Validating: ${text}`);\r\n                return text === \"123\" ? \"Not 123!\" : null;\r\n              },\r\n            });\r\n            if (repositoryUrl) {\r\n              branchName = await window.showInputBox({\r\n                value: \"\",\r\n                valueSelection: [2, 4],\r\n                placeHolder: \"Enter branch name \",\r\n                ignoreFocusOut: true,\r\n                validateInput: (text) => {\r\n                  // window.showInformationMessage(`Validating: ${text}`);\r\n                  return text === \"123\" ? \"Not 123!\" : null;\r\n                },\r\n              });\r\n              if (branchName) {\r\n                accessToken = await window.showInputBox({\r\n                  value: \"\",\r\n                  valueSelection: [2, 4],\r\n                  placeHolder: \"Enter access token \",\r\n                  ignoreFocusOut: true,\r\n                  validateInput: (text) => {\r\n                    // window.showInformationMessage(`Validating: ${text}`);\r\n                    return text === \"123\" ? \"Not 123!\" : null;\r\n                  },\r\n                });\r\n                if (accessToken || authType === \"none\") {\r\n                  repoNamealias = await window.showInputBox({\r\n                    value: \"\",\r\n                    valueSelection: [2, 4],\r\n                    placeHolder: \"Enter repository name \",\r\n                    ignoreFocusOut: true,\r\n                    validateInput: (text) => {\r\n                      // window.showInformationMessage(`Validating: ${text}`);\r\n                      return text === \"123\" ? \"Not 123!\" : null;\r\n                    },\r\n                  });\r\n                  if (repoNamealias) {\r\n                    repositoryDescription = await window.showInputBox({\r\n                      value: \"\",\r\n                      valueSelection: [2, 4],\r\n                      placeHolder: \"Enter description \",\r\n                      ignoreFocusOut: true,\r\n                      validateInput: (text) => {\r\n                        // window.showInformationMessage(`Validating: ${text}`);\r\n                        return text === \"123\" ? \"Not 123!\" : null;\r\n                      },\r\n                    });\r\n                  }\r\n                  if (\r\n                    selectedRepositoryType &&\r\n                    selectedRepoSource &&\r\n                    authType &&\r\n                    repositoryUrl &&\r\n                    branchName &&\r\n                    repoNamealias &&\r\n                    repositoryDescription\r\n                  ) {\r\n                    let finalCommand = `tmpo repository add -t \"${selectedRepositoryType}\" -n  \"${repoNamealias}\" -d \"${repositoryDescription}\" --provider \"${selectedRepoSource}\" --authentication \"${authType}\" --url \"${repositoryUrl}\" --branch \"${branchName}\"`;\r\n                    finalCommand =\r\n                      authType === \"token\"\r\n                        ? finalCommand + ` --token ${accessToken}`\r\n                        : finalCommand;\r\n                    await executeCommand(finalCommand);\r\n                  }\r\n                } else {\r\n                  window.showErrorMessage(\r\n                    \"Access token is required if auth type is token\"\r\n                  );\r\n                  return;\r\n                }\r\n              }\r\n            } else {\r\n              window.showErrorMessage(\"Invalid repository url\");\r\n              return;\r\n            }\r\n          }\r\n        } else {\r\n          window.showErrorMessage(\"Repository provider is required!\");\r\n          return;\r\n        }\r\n      } else {\r\n        window.showErrorMessage(\r\n          \"Repository Type Directory is not yet supported!\"\r\n        );\r\n        return;\r\n      }\r\n    })\r\n  );\r\n}\r\n","module.exports = require(\"child_process\");;","module.exports = require(\"fs\");;","module.exports = require(\"os\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"sourceRoot":""}